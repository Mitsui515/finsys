// Code generated by Thrift Compiler (0.16.0). DO NOT EDIT.

package fraud

import (
	"bytes"
	"context"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

// Attributes:
//  - Type
//  - Amount
//  - NameOrig
//  - OldBalanceOrig
//  - NewBalanceOrig_
//  - NameDest
//  - OldBalanceDest
//  - NewBalanceDest_
//  - Timestamp
type TransactionData struct {
  Type string `thrift:"type,1" db:"type" json:"type"`
  Amount float64 `thrift:"amount,2" db:"amount" json:"amount"`
  NameOrig string `thrift:"nameOrig,3" db:"nameOrig" json:"nameOrig"`
  OldBalanceOrig float64 `thrift:"oldBalanceOrig,4" db:"oldBalanceOrig" json:"oldBalanceOrig"`
  NewBalanceOrig_ float64 `thrift:"newBalanceOrig,5" db:"newBalanceOrig" json:"newBalanceOrig"`
  NameDest string `thrift:"nameDest,6" db:"nameDest" json:"nameDest"`
  OldBalanceDest float64 `thrift:"oldBalanceDest,7" db:"oldBalanceDest" json:"oldBalanceDest"`
  NewBalanceDest_ float64 `thrift:"newBalanceDest,8" db:"newBalanceDest" json:"newBalanceDest"`
  Timestamp *string `thrift:"timestamp,9" db:"timestamp" json:"timestamp,omitempty"`
}

func NewTransactionData() *TransactionData {
  return &TransactionData{}
}


func (p *TransactionData) GetType() string {
  return p.Type
}

func (p *TransactionData) GetAmount() float64 {
  return p.Amount
}

func (p *TransactionData) GetNameOrig() string {
  return p.NameOrig
}

func (p *TransactionData) GetOldBalanceOrig() float64 {
  return p.OldBalanceOrig
}

func (p *TransactionData) GetNewBalanceOrig_() float64 {
  return p.NewBalanceOrig_
}

func (p *TransactionData) GetNameDest() string {
  return p.NameDest
}

func (p *TransactionData) GetOldBalanceDest() float64 {
  return p.OldBalanceDest
}

func (p *TransactionData) GetNewBalanceDest_() float64 {
  return p.NewBalanceDest_
}
var TransactionData_Timestamp_DEFAULT string
func (p *TransactionData) GetTimestamp() string {
  if !p.IsSetTimestamp() {
    return TransactionData_Timestamp_DEFAULT
  }
return *p.Timestamp
}
func (p *TransactionData) IsSetTimestamp() bool {
  return p.Timestamp != nil
}

func (p *TransactionData) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TransactionData)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *TransactionData)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Amount = v
}
  return nil
}

func (p *TransactionData)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NameOrig = v
}
  return nil
}

func (p *TransactionData)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.OldBalanceOrig = v
}
  return nil
}

func (p *TransactionData)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.NewBalanceOrig_ = v
}
  return nil
}

func (p *TransactionData)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.NameDest = v
}
  return nil
}

func (p *TransactionData)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.OldBalanceDest = v
}
  return nil
}

func (p *TransactionData)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.NewBalanceDest_ = v
}
  return nil
}

func (p *TransactionData)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Timestamp = &v
}
  return nil
}

func (p *TransactionData) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TransactionData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TransactionData) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *TransactionData) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "amount", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:amount: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.Amount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.amount (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:amount: ", p), err) }
  return err
}

func (p *TransactionData) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "nameOrig", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nameOrig: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.NameOrig)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nameOrig (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nameOrig: ", p), err) }
  return err
}

func (p *TransactionData) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "oldBalanceOrig", thrift.DOUBLE, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:oldBalanceOrig: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.OldBalanceOrig)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.oldBalanceOrig (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:oldBalanceOrig: ", p), err) }
  return err
}

func (p *TransactionData) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "newBalanceOrig", thrift.DOUBLE, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:newBalanceOrig: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.NewBalanceOrig_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.newBalanceOrig (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:newBalanceOrig: ", p), err) }
  return err
}

func (p *TransactionData) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "nameDest", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:nameDest: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.NameDest)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nameDest (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:nameDest: ", p), err) }
  return err
}

func (p *TransactionData) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "oldBalanceDest", thrift.DOUBLE, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:oldBalanceDest: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.OldBalanceDest)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.oldBalanceDest (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:oldBalanceDest: ", p), err) }
  return err
}

func (p *TransactionData) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "newBalanceDest", thrift.DOUBLE, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:newBalanceDest: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.NewBalanceDest_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.newBalanceDest (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:newBalanceDest: ", p), err) }
  return err
}

func (p *TransactionData) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTimestamp() {
    if err := oprot.WriteFieldBegin(ctx, "timestamp", thrift.STRING, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:timestamp: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Timestamp)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timestamp (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:timestamp: ", p), err) }
  }
  return err
}

func (p *TransactionData) Equals(other *TransactionData) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Type != other.Type { return false }
  if p.Amount != other.Amount { return false }
  if p.NameOrig != other.NameOrig { return false }
  if p.OldBalanceOrig != other.OldBalanceOrig { return false }
  if p.NewBalanceOrig_ != other.NewBalanceOrig_ { return false }
  if p.NameDest != other.NameDest { return false }
  if p.OldBalanceDest != other.OldBalanceDest { return false }
  if p.NewBalanceDest_ != other.NewBalanceDest_ { return false }
  if p.Timestamp != other.Timestamp {
    if p.Timestamp == nil || other.Timestamp == nil {
      return false
    }
    if (*p.Timestamp) != (*other.Timestamp) { return false }
  }
  return true
}

func (p *TransactionData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TransactionData(%+v)", *p)
}

// Attributes:
//  - IsFraud
//  - FraudProbability
//  - FeatureImportance
type FraudPrediction struct {
  IsFraud bool `thrift:"isFraud,1" db:"isFraud" json:"isFraud"`
  FraudProbability float64 `thrift:"fraudProbability,2" db:"fraudProbability" json:"fraudProbability"`
  FeatureImportance map[string]float64 `thrift:"featureImportance,3" db:"featureImportance" json:"featureImportance"`
}

func NewFraudPrediction() *FraudPrediction {
  return &FraudPrediction{}
}


func (p *FraudPrediction) GetIsFraud() bool {
  return p.IsFraud
}

func (p *FraudPrediction) GetFraudProbability() float64 {
  return p.FraudProbability
}

func (p *FraudPrediction) GetFeatureImportance() map[string]float64 {
  return p.FeatureImportance
}
func (p *FraudPrediction) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FraudPrediction)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.IsFraud = v
}
  return nil
}

func (p *FraudPrediction)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FraudProbability = v
}
  return nil
}

func (p *FraudPrediction)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]float64, size)
  p.FeatureImportance =  tMap
  for i := 0; i < size; i ++ {
var _key0 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key0 = v
}
var _val1 float64
    if v, err := iprot.ReadDouble(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val1 = v
}
    p.FeatureImportance[_key0] = _val1
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *FraudPrediction) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "FraudPrediction"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FraudPrediction) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "isFraud", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:isFraud: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IsFraud)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isFraud (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:isFraud: ", p), err) }
  return err
}

func (p *FraudPrediction) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fraudProbability", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fraudProbability: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.FraudProbability)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fraudProbability (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fraudProbability: ", p), err) }
  return err
}

func (p *FraudPrediction) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "featureImportance", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:featureImportance: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.DOUBLE, len(p.FeatureImportance)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.FeatureImportance {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteDouble(ctx, float64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:featureImportance: ", p), err) }
  return err
}

func (p *FraudPrediction) Equals(other *FraudPrediction) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.IsFraud != other.IsFraud { return false }
  if p.FraudProbability != other.FraudProbability { return false }
  if len(p.FeatureImportance) != len(other.FeatureImportance) { return false }
  for k, _tgt := range p.FeatureImportance {
    _src2 := other.FeatureImportance[k]
    if _tgt != _src2 { return false }
  }
  return true
}

func (p *FraudPrediction) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FraudPrediction(%+v)", *p)
}

// Attributes:
//  - DataPath
//  - StartDate
//  - EndDate
//  - FocusFeatures
type EDARequest struct {
  DataPath string `thrift:"dataPath,1" db:"dataPath" json:"dataPath"`
  StartDate *string `thrift:"startDate,2" db:"startDate" json:"startDate,omitempty"`
  EndDate *string `thrift:"endDate,3" db:"endDate" json:"endDate,omitempty"`
  FocusFeatures []string `thrift:"focusFeatures,4" db:"focusFeatures" json:"focusFeatures,omitempty"`
}

func NewEDARequest() *EDARequest {
  return &EDARequest{}
}


func (p *EDARequest) GetDataPath() string {
  return p.DataPath
}
var EDARequest_StartDate_DEFAULT string
func (p *EDARequest) GetStartDate() string {
  if !p.IsSetStartDate() {
    return EDARequest_StartDate_DEFAULT
  }
return *p.StartDate
}
var EDARequest_EndDate_DEFAULT string
func (p *EDARequest) GetEndDate() string {
  if !p.IsSetEndDate() {
    return EDARequest_EndDate_DEFAULT
  }
return *p.EndDate
}
var EDARequest_FocusFeatures_DEFAULT []string

func (p *EDARequest) GetFocusFeatures() []string {
  return p.FocusFeatures
}
func (p *EDARequest) IsSetStartDate() bool {
  return p.StartDate != nil
}

func (p *EDARequest) IsSetEndDate() bool {
  return p.EndDate != nil
}

func (p *EDARequest) IsSetFocusFeatures() bool {
  return p.FocusFeatures != nil
}

func (p *EDARequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EDARequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DataPath = v
}
  return nil
}

func (p *EDARequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.StartDate = &v
}
  return nil
}

func (p *EDARequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.EndDate = &v
}
  return nil
}

func (p *EDARequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.FocusFeatures =  tSlice
  for i := 0; i < size; i ++ {
var _elem3 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem3 = v
}
    p.FocusFeatures = append(p.FocusFeatures, _elem3)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *EDARequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "EDARequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EDARequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dataPath", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dataPath: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DataPath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dataPath (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dataPath: ", p), err) }
  return err
}

func (p *EDARequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStartDate() {
    if err := oprot.WriteFieldBegin(ctx, "startDate", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:startDate: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.StartDate)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.startDate (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:startDate: ", p), err) }
  }
  return err
}

func (p *EDARequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEndDate() {
    if err := oprot.WriteFieldBegin(ctx, "endDate", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:endDate: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.EndDate)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.endDate (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:endDate: ", p), err) }
  }
  return err
}

func (p *EDARequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetFocusFeatures() {
    if err := oprot.WriteFieldBegin(ctx, "focusFeatures", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:focusFeatures: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.FocusFeatures)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.FocusFeatures {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:focusFeatures: ", p), err) }
  }
  return err
}

func (p *EDARequest) Equals(other *EDARequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.DataPath != other.DataPath { return false }
  if p.StartDate != other.StartDate {
    if p.StartDate == nil || other.StartDate == nil {
      return false
    }
    if (*p.StartDate) != (*other.StartDate) { return false }
  }
  if p.EndDate != other.EndDate {
    if p.EndDate == nil || other.EndDate == nil {
      return false
    }
    if (*p.EndDate) != (*other.EndDate) { return false }
  }
  if len(p.FocusFeatures) != len(other.FocusFeatures) { return false }
  for i, _tgt := range p.FocusFeatures {
    _src4 := other.FocusFeatures[i]
    if _tgt != _src4 { return false }
  }
  return true
}

func (p *EDARequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EDARequest(%+v)", *p)
}

// Attributes:
//  - Transaction
//  - Prediction
//  - FewShotExamples
//  - AnalysisDepth
type FraudAnalysisRequest struct {
  Transaction *TransactionData `thrift:"transaction,1" db:"transaction" json:"transaction"`
  Prediction *FraudPrediction `thrift:"prediction,2" db:"prediction" json:"prediction"`
  FewShotExamples []string `thrift:"fewShotExamples,3" db:"fewShotExamples" json:"fewShotExamples,omitempty"`
  AnalysisDepth *string `thrift:"analysisDepth,4" db:"analysisDepth" json:"analysisDepth,omitempty"`
}

func NewFraudAnalysisRequest() *FraudAnalysisRequest {
  return &FraudAnalysisRequest{}
}

var FraudAnalysisRequest_Transaction_DEFAULT *TransactionData
func (p *FraudAnalysisRequest) GetTransaction() *TransactionData {
  if !p.IsSetTransaction() {
    return FraudAnalysisRequest_Transaction_DEFAULT
  }
return p.Transaction
}
var FraudAnalysisRequest_Prediction_DEFAULT *FraudPrediction
func (p *FraudAnalysisRequest) GetPrediction() *FraudPrediction {
  if !p.IsSetPrediction() {
    return FraudAnalysisRequest_Prediction_DEFAULT
  }
return p.Prediction
}
var FraudAnalysisRequest_FewShotExamples_DEFAULT []string

func (p *FraudAnalysisRequest) GetFewShotExamples() []string {
  return p.FewShotExamples
}
var FraudAnalysisRequest_AnalysisDepth_DEFAULT string
func (p *FraudAnalysisRequest) GetAnalysisDepth() string {
  if !p.IsSetAnalysisDepth() {
    return FraudAnalysisRequest_AnalysisDepth_DEFAULT
  }
return *p.AnalysisDepth
}
func (p *FraudAnalysisRequest) IsSetTransaction() bool {
  return p.Transaction != nil
}

func (p *FraudAnalysisRequest) IsSetPrediction() bool {
  return p.Prediction != nil
}

func (p *FraudAnalysisRequest) IsSetFewShotExamples() bool {
  return p.FewShotExamples != nil
}

func (p *FraudAnalysisRequest) IsSetAnalysisDepth() bool {
  return p.AnalysisDepth != nil
}

func (p *FraudAnalysisRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FraudAnalysisRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Transaction = &TransactionData{}
  if err := p.Transaction.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Transaction), err)
  }
  return nil
}

func (p *FraudAnalysisRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Prediction = &FraudPrediction{}
  if err := p.Prediction.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Prediction), err)
  }
  return nil
}

func (p *FraudAnalysisRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.FewShotExamples =  tSlice
  for i := 0; i < size; i ++ {
var _elem5 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem5 = v
}
    p.FewShotExamples = append(p.FewShotExamples, _elem5)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *FraudAnalysisRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.AnalysisDepth = &v
}
  return nil
}

func (p *FraudAnalysisRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "FraudAnalysisRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FraudAnalysisRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "transaction", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:transaction: ", p), err) }
  if err := p.Transaction.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Transaction), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:transaction: ", p), err) }
  return err
}

func (p *FraudAnalysisRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "prediction", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:prediction: ", p), err) }
  if err := p.Prediction.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Prediction), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:prediction: ", p), err) }
  return err
}

func (p *FraudAnalysisRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetFewShotExamples() {
    if err := oprot.WriteFieldBegin(ctx, "fewShotExamples", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:fewShotExamples: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.FewShotExamples)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.FewShotExamples {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:fewShotExamples: ", p), err) }
  }
  return err
}

func (p *FraudAnalysisRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAnalysisDepth() {
    if err := oprot.WriteFieldBegin(ctx, "analysisDepth", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:analysisDepth: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.AnalysisDepth)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.analysisDepth (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:analysisDepth: ", p), err) }
  }
  return err
}

func (p *FraudAnalysisRequest) Equals(other *FraudAnalysisRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Transaction.Equals(other.Transaction) { return false }
  if !p.Prediction.Equals(other.Prediction) { return false }
  if len(p.FewShotExamples) != len(other.FewShotExamples) { return false }
  for i, _tgt := range p.FewShotExamples {
    _src6 := other.FewShotExamples[i]
    if _tgt != _src6 { return false }
  }
  if p.AnalysisDepth != other.AnalysisDepth {
    if p.AnalysisDepth == nil || other.AnalysisDepth == nil {
      return false
    }
    if (*p.AnalysisDepth) != (*other.AnalysisDepth) { return false }
  }
  return true
}

func (p *FraudAnalysisRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FraudAnalysisRequest(%+v)", *p)
}

type FraudService interface {
  // Parameters:
  //  - Transaction
  PredictFraud(ctx context.Context, transaction *TransactionData) (_r *FraudPrediction, _err error)
  // Parameters:
  //  - DataPath
  TrainModel(ctx context.Context, dataPath string) (_r bool, _err error)
  // Parameters:
  //  - Request
  GenerateEDAReport(ctx context.Context, request *EDARequest) (_r string, _err error)
  // Parameters:
  //  - Request
  GenerateFraudAnalysisReport(ctx context.Context, request *FraudAnalysisRequest) (_r string, _err error)
}

type FraudServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewFraudServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *FraudServiceClient {
  return &FraudServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewFraudServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *FraudServiceClient {
  return &FraudServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewFraudServiceClient(c thrift.TClient) *FraudServiceClient {
  return &FraudServiceClient{
    c: c,
  }
}

func (p *FraudServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *FraudServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *FraudServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - Transaction
func (p *FraudServiceClient) PredictFraud(ctx context.Context, transaction *TransactionData) (_r *FraudPrediction, _err error) {
  var _args7 FraudServicePredictFraudArgs
  _args7.Transaction = transaction
  var _result9 FraudServicePredictFraudResult
  var _meta8 thrift.ResponseMeta
  _meta8, _err = p.Client_().Call(ctx, "predictFraud", &_args7, &_result9)
  p.SetLastResponseMeta_(_meta8)
  if _err != nil {
    return
  }
  if _ret10 := _result9.GetSuccess(); _ret10 != nil {
    return _ret10, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "predictFraud failed: unknown result")
}

// Parameters:
//  - DataPath
func (p *FraudServiceClient) TrainModel(ctx context.Context, dataPath string) (_r bool, _err error) {
  var _args11 FraudServiceTrainModelArgs
  _args11.DataPath = dataPath
  var _result13 FraudServiceTrainModelResult
  var _meta12 thrift.ResponseMeta
  _meta12, _err = p.Client_().Call(ctx, "trainModel", &_args11, &_result13)
  p.SetLastResponseMeta_(_meta12)
  if _err != nil {
    return
  }
  return _result13.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *FraudServiceClient) GenerateEDAReport(ctx context.Context, request *EDARequest) (_r string, _err error) {
  var _args14 FraudServiceGenerateEDAReportArgs
  _args14.Request = request
  var _result16 FraudServiceGenerateEDAReportResult
  var _meta15 thrift.ResponseMeta
  _meta15, _err = p.Client_().Call(ctx, "generateEDAReport", &_args14, &_result16)
  p.SetLastResponseMeta_(_meta15)
  if _err != nil {
    return
  }
  return _result16.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *FraudServiceClient) GenerateFraudAnalysisReport(ctx context.Context, request *FraudAnalysisRequest) (_r string, _err error) {
  var _args17 FraudServiceGenerateFraudAnalysisReportArgs
  _args17.Request = request
  var _result19 FraudServiceGenerateFraudAnalysisReportResult
  var _meta18 thrift.ResponseMeta
  _meta18, _err = p.Client_().Call(ctx, "generateFraudAnalysisReport", &_args17, &_result19)
  p.SetLastResponseMeta_(_meta18)
  if _err != nil {
    return
  }
  return _result19.GetSuccess(), nil
}

type FraudServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler FraudService
}

func (p *FraudServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *FraudServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *FraudServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewFraudServiceProcessor(handler FraudService) *FraudServiceProcessor {

  self20 := &FraudServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self20.processorMap["predictFraud"] = &fraudServiceProcessorPredictFraud{handler:handler}
  self20.processorMap["trainModel"] = &fraudServiceProcessorTrainModel{handler:handler}
  self20.processorMap["generateEDAReport"] = &fraudServiceProcessorGenerateEDAReport{handler:handler}
  self20.processorMap["generateFraudAnalysisReport"] = &fraudServiceProcessorGenerateFraudAnalysisReport{handler:handler}
return self20
}

func (p *FraudServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x21 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x21.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x21

}

type fraudServiceProcessorPredictFraud struct {
  handler FraudService
}

func (p *fraudServiceProcessorPredictFraud) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := FraudServicePredictFraudArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "predictFraud", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := FraudServicePredictFraudResult{}
  var retval *FraudPrediction
  if retval, err2 = p.handler.PredictFraud(ctx, args.Transaction); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing predictFraud: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "predictFraud", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "predictFraud", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type fraudServiceProcessorTrainModel struct {
  handler FraudService
}

func (p *fraudServiceProcessorTrainModel) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := FraudServiceTrainModelArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "trainModel", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := FraudServiceTrainModelResult{}
  var retval bool
  if retval, err2 = p.handler.TrainModel(ctx, args.DataPath); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing trainModel: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "trainModel", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "trainModel", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type fraudServiceProcessorGenerateEDAReport struct {
  handler FraudService
}

func (p *fraudServiceProcessorGenerateEDAReport) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := FraudServiceGenerateEDAReportArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "generateEDAReport", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := FraudServiceGenerateEDAReportResult{}
  var retval string
  if retval, err2 = p.handler.GenerateEDAReport(ctx, args.Request); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing generateEDAReport: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "generateEDAReport", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "generateEDAReport", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type fraudServiceProcessorGenerateFraudAnalysisReport struct {
  handler FraudService
}

func (p *fraudServiceProcessorGenerateFraudAnalysisReport) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := FraudServiceGenerateFraudAnalysisReportArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "generateFraudAnalysisReport", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := FraudServiceGenerateFraudAnalysisReportResult{}
  var retval string
  if retval, err2 = p.handler.GenerateFraudAnalysisReport(ctx, args.Request); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing generateFraudAnalysisReport: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "generateFraudAnalysisReport", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "generateFraudAnalysisReport", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Transaction
type FraudServicePredictFraudArgs struct {
  Transaction *TransactionData `thrift:"transaction,1" db:"transaction" json:"transaction"`
}

func NewFraudServicePredictFraudArgs() *FraudServicePredictFraudArgs {
  return &FraudServicePredictFraudArgs{}
}

var FraudServicePredictFraudArgs_Transaction_DEFAULT *TransactionData
func (p *FraudServicePredictFraudArgs) GetTransaction() *TransactionData {
  if !p.IsSetTransaction() {
    return FraudServicePredictFraudArgs_Transaction_DEFAULT
  }
return p.Transaction
}
func (p *FraudServicePredictFraudArgs) IsSetTransaction() bool {
  return p.Transaction != nil
}

func (p *FraudServicePredictFraudArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FraudServicePredictFraudArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Transaction = &TransactionData{}
  if err := p.Transaction.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Transaction), err)
  }
  return nil
}

func (p *FraudServicePredictFraudArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "predictFraud_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FraudServicePredictFraudArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "transaction", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:transaction: ", p), err) }
  if err := p.Transaction.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Transaction), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:transaction: ", p), err) }
  return err
}

func (p *FraudServicePredictFraudArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FraudServicePredictFraudArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FraudServicePredictFraudResult struct {
  Success *FraudPrediction `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFraudServicePredictFraudResult() *FraudServicePredictFraudResult {
  return &FraudServicePredictFraudResult{}
}

var FraudServicePredictFraudResult_Success_DEFAULT *FraudPrediction
func (p *FraudServicePredictFraudResult) GetSuccess() *FraudPrediction {
  if !p.IsSetSuccess() {
    return FraudServicePredictFraudResult_Success_DEFAULT
  }
return p.Success
}
func (p *FraudServicePredictFraudResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *FraudServicePredictFraudResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FraudServicePredictFraudResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &FraudPrediction{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *FraudServicePredictFraudResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "predictFraud_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FraudServicePredictFraudResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *FraudServicePredictFraudResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FraudServicePredictFraudResult(%+v)", *p)
}

// Attributes:
//  - DataPath
type FraudServiceTrainModelArgs struct {
  DataPath string `thrift:"dataPath,1" db:"dataPath" json:"dataPath"`
}

func NewFraudServiceTrainModelArgs() *FraudServiceTrainModelArgs {
  return &FraudServiceTrainModelArgs{}
}


func (p *FraudServiceTrainModelArgs) GetDataPath() string {
  return p.DataPath
}
func (p *FraudServiceTrainModelArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FraudServiceTrainModelArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DataPath = v
}
  return nil
}

func (p *FraudServiceTrainModelArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "trainModel_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FraudServiceTrainModelArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dataPath", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dataPath: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DataPath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dataPath (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dataPath: ", p), err) }
  return err
}

func (p *FraudServiceTrainModelArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FraudServiceTrainModelArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FraudServiceTrainModelResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFraudServiceTrainModelResult() *FraudServiceTrainModelResult {
  return &FraudServiceTrainModelResult{}
}

var FraudServiceTrainModelResult_Success_DEFAULT bool
func (p *FraudServiceTrainModelResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return FraudServiceTrainModelResult_Success_DEFAULT
  }
return *p.Success
}
func (p *FraudServiceTrainModelResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *FraudServiceTrainModelResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FraudServiceTrainModelResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *FraudServiceTrainModelResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "trainModel_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FraudServiceTrainModelResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *FraudServiceTrainModelResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FraudServiceTrainModelResult(%+v)", *p)
}

// Attributes:
//  - Request
type FraudServiceGenerateEDAReportArgs struct {
  Request *EDARequest `thrift:"request,1" db:"request" json:"request"`
}

func NewFraudServiceGenerateEDAReportArgs() *FraudServiceGenerateEDAReportArgs {
  return &FraudServiceGenerateEDAReportArgs{}
}

var FraudServiceGenerateEDAReportArgs_Request_DEFAULT *EDARequest
func (p *FraudServiceGenerateEDAReportArgs) GetRequest() *EDARequest {
  if !p.IsSetRequest() {
    return FraudServiceGenerateEDAReportArgs_Request_DEFAULT
  }
return p.Request
}
func (p *FraudServiceGenerateEDAReportArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *FraudServiceGenerateEDAReportArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FraudServiceGenerateEDAReportArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &EDARequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *FraudServiceGenerateEDAReportArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "generateEDAReport_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FraudServiceGenerateEDAReportArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *FraudServiceGenerateEDAReportArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FraudServiceGenerateEDAReportArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FraudServiceGenerateEDAReportResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFraudServiceGenerateEDAReportResult() *FraudServiceGenerateEDAReportResult {
  return &FraudServiceGenerateEDAReportResult{}
}

var FraudServiceGenerateEDAReportResult_Success_DEFAULT string
func (p *FraudServiceGenerateEDAReportResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return FraudServiceGenerateEDAReportResult_Success_DEFAULT
  }
return *p.Success
}
func (p *FraudServiceGenerateEDAReportResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *FraudServiceGenerateEDAReportResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FraudServiceGenerateEDAReportResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *FraudServiceGenerateEDAReportResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "generateEDAReport_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FraudServiceGenerateEDAReportResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *FraudServiceGenerateEDAReportResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FraudServiceGenerateEDAReportResult(%+v)", *p)
}

// Attributes:
//  - Request
type FraudServiceGenerateFraudAnalysisReportArgs struct {
  Request *FraudAnalysisRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewFraudServiceGenerateFraudAnalysisReportArgs() *FraudServiceGenerateFraudAnalysisReportArgs {
  return &FraudServiceGenerateFraudAnalysisReportArgs{}
}

var FraudServiceGenerateFraudAnalysisReportArgs_Request_DEFAULT *FraudAnalysisRequest
func (p *FraudServiceGenerateFraudAnalysisReportArgs) GetRequest() *FraudAnalysisRequest {
  if !p.IsSetRequest() {
    return FraudServiceGenerateFraudAnalysisReportArgs_Request_DEFAULT
  }
return p.Request
}
func (p *FraudServiceGenerateFraudAnalysisReportArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *FraudServiceGenerateFraudAnalysisReportArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FraudServiceGenerateFraudAnalysisReportArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &FraudAnalysisRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *FraudServiceGenerateFraudAnalysisReportArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "generateFraudAnalysisReport_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FraudServiceGenerateFraudAnalysisReportArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *FraudServiceGenerateFraudAnalysisReportArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FraudServiceGenerateFraudAnalysisReportArgs(%+v)", *p)
}

// Attributes:
//  - Success
type FraudServiceGenerateFraudAnalysisReportResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFraudServiceGenerateFraudAnalysisReportResult() *FraudServiceGenerateFraudAnalysisReportResult {
  return &FraudServiceGenerateFraudAnalysisReportResult{}
}

var FraudServiceGenerateFraudAnalysisReportResult_Success_DEFAULT string
func (p *FraudServiceGenerateFraudAnalysisReportResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return FraudServiceGenerateFraudAnalysisReportResult_Success_DEFAULT
  }
return *p.Success
}
func (p *FraudServiceGenerateFraudAnalysisReportResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *FraudServiceGenerateFraudAnalysisReportResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FraudServiceGenerateFraudAnalysisReportResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *FraudServiceGenerateFraudAnalysisReportResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "generateFraudAnalysisReport_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FraudServiceGenerateFraudAnalysisReportResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *FraudServiceGenerateFraudAnalysisReportResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FraudServiceGenerateFraudAnalysisReportResult(%+v)", *p)
}


